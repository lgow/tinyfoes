plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forgeconfigapi_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    expand(project.properties)
    inputs.property "version", project.version
    inputs.property("minecraft_version", rootProject.minecraft_version)
    inputs.property("architectury_api_version", rootProject.architectury_api_version)
    inputs.property("forgeconfigapi_version", rootProject.forgeconfigapi_version)
    inputs.property("java_version", rootProject.java_version)
    inputs.property("license", rootProject.license)
    inputs.property("archives_base_name", rootProject.archives_base_name)
    inputs.property("display_name", rootProject.display_name)
    filesMatching('fabric.mod.json') {
        expand "version": project.version
        expand "minecraft_version": rootProject.minecraft_version
        expand "architectury_api_version": rootProject.architectury_api_version
        expand "forgeconfigapi_version": rootProject.forgeconfigapi_version
        expand "java_version": rootProject.java_version
        expand "license": rootProject.license
        expand "archives_base_name": rootProject.archives_base_name
        expand "display_name": rootProject.display_name
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
