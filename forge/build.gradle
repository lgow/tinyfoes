plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "tinyfoes-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    expand(project.properties)
    inputs.property "version", project.version
    inputs.property("minecraft_version", rootProject.minecraft_version)
    inputs.property("architectury_version", rootProject.architectury_version)
    inputs.property("forge_loader_version", rootProject.forge_loader_version)
    inputs.property("java_version", rootProject.java_version)
    inputs.property("pack_format", rootProject.pack_format)


    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
        expand "forge_loader_version": rootProject.forge_loader_version
        expand "minecraft_version": rootProject.minecraft_version
        expand "architectury_version": rootProject.architectury_version
    }
    filesMatching("pack.mcmeta"){
        expand "pack_format": rootProject.pack_format
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}